import asyncio
import logging
import sys
import json
from os import getenv

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message, FSInputFile

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = getenv("BOT_TOKEN")
ADMIN_ID = getenv("ADMIN_ID")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª–∏–∫–æ–≤
DATA_FILE = "click_data.json"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
dp = Dispatcher()


# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    try:
        with open(DATA_FILE, "r") as file:
            return json.load(file)
    except FileNotFoundError:
        return {"click_count": 0, "user_list": []}


def save_data(data):
    with open(DATA_FILE, "w") as file:
        json.dump(data, file)


# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
data = load_data()


@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    """
    global data
    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    user_message = (
        "‚ö†Ô∏è –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞—à–∏ –º–æ—â–Ω–æ—Å—Ç–∏ –Ω–µ –ø–æ–∑–≤–æ–ª—è—é—Ç –ø—Ä–∏–Ω—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
        "üìå –ù–æ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ–ø–æ–≤–µ—Å—Ç–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ —Ä–µ—à–∏–º —ç—Ç—É –Ω–µ–±–æ–ª—å—à—É—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –Ω–µ–ø–æ–ª–∞–¥–∫—É!\n\n"
        "‚ú® –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—à–∏–º —É—Å–ª—É–≥–∞–º!"
    )
    await message.answer(user_message)
    user_id = message.from_user.id
    # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    if user_id not in data["user_list"]:
        data["user_list"].append(user_id)
        data["click_count"] += 1
        save_data(data)

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        if data["click_count"] % 2 == 0:
            await message.bot.send_message(ADMIN_ID, f"–ù–∞ /start –Ω–∞–∂–∞–ª–∏ {data['click_count']} —Ä–∞–∑(–∞).")
        if data["click_count"] % 10 == 0:
            try:
                file = FSInputFile(DATA_FILE)
                await message.bot.send_document(chat_id=ADMIN_ID, document=file,
                                                caption="üìÑ –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
            except Exception as e:
                await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")


async def main() -> None:
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
